// Mocks generated by Mockito 5.4.6 from annotations
// in thinktank_flutter/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:thinktank_flutter/core/error/failures.dart' as _i5;
import 'package:thinktank_flutter/features/auth/domain/entities/user.dart'
    as _i6;
import 'package:thinktank_flutter/features/auth/domain/repositories/auth_repository.dart'
    as _i3;
import 'package:thinktank_flutter/features/feedback/domain/entities/feedback.dart'
    as _i10;
import 'package:thinktank_flutter/features/feedback/domain/repositories/feedback_repository.dart'
    as _i9;
import 'package:thinktank_flutter/features/ideas/domain/entities/idea.dart'
    as _i8;
import 'package:thinktank_flutter/features/ideas/domain/repositories/idea_repository.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.AuthResponse>> login({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.AuthResponse>>.value(
                _FakeEither_0<_i5.Failure, _i6.AuthResponse>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.AuthResponse>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.AuthResponse>> register({
    required String? email,
    required String? password,
    required String? name,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
          {
            #email: email,
            #password: password,
            #name: name,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.AuthResponse>>.value(
                _FakeEither_0<_i5.Failure, _i6.AuthResponse>(
          this,
          Invocation.method(
            #register,
            [],
            {
              #email: email,
              #password: password,
              #name: name,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.AuthResponse>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> getCurrentUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
            _FakeEither_0<_i5.Failure, _i6.User>(
          this,
          Invocation.method(
            #getCurrentUser,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> isAuthenticated() =>
      (super.noSuchMethod(
        Invocation.method(
          #isAuthenticated,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #isAuthenticated,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateUserProfile({
    required String? name,
    String? profileImage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserProfile,
          [],
          {
            #name: name,
            #profileImage: profileImage,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #updateUserProfile,
            [],
            {
              #name: name,
              #profileImage: profileImage,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> changePassword({
    required String? currentPassword,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [],
          {
            #currentPassword: currentPassword,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #changePassword,
            [],
            {
              #currentPassword: currentPassword,
              #newPassword: newPassword,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [IdeaRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIdeaRepository extends _i1.Mock implements _i7.IdeaRepository {
  MockIdeaRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.Idea>>> getApprovedIdeas() =>
      (super.noSuchMethod(
        Invocation.method(
          #getApprovedIdeas,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i8.Idea>>>.value(
            _FakeEither_0<_i5.Failure, List<_i8.Idea>>(
          this,
          Invocation.method(
            #getApprovedIdeas,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.Idea>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.Idea>>> getUserIdeas() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserIdeas,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i8.Idea>>>.value(
            _FakeEither_0<_i5.Failure, List<_i8.Idea>>(
          this,
          Invocation.method(
            #getUserIdeas,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.Idea>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.Idea>>> getFeedbackPool() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFeedbackPool,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i8.Idea>>>.value(
            _FakeEither_0<_i5.Failure, List<_i8.Idea>>(
          this,
          Invocation.method(
            #getFeedbackPool,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.Idea>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.Idea>> submitIdea({
    required String? title,
    required String? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitIdea,
          [],
          {
            #title: title,
            #description: description,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i8.Idea>>.value(
            _FakeEither_0<_i5.Failure, _i8.Idea>(
          this,
          Invocation.method(
            #submitIdea,
            [],
            {
              #title: title,
              #description: description,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i8.Idea>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> submitFeedback({
    required int? ideaId,
    required String? feedback,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitFeedback,
          [],
          {
            #ideaId: ideaId,
            #feedback: feedback,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #submitFeedback,
            [],
            {
              #ideaId: ideaId,
              #feedback: feedback,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [FeedbackRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeedbackRepository extends _i1.Mock
    implements _i9.FeedbackRepository {
  MockFeedbackRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i10.Feedback>>> getUserFeedback() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserFeedback,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i10.Feedback>>>.value(
                _FakeEither_0<_i5.Failure, List<_i10.Feedback>>(
          this,
          Invocation.method(
            #getUserFeedback,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i10.Feedback>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> submitFeedback({
    required int? ideaId,
    required String? content,
    required int? rating,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitFeedback,
          [],
          {
            #ideaId: ideaId,
            #content: content,
            #rating: rating,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #submitFeedback,
            [],
            {
              #ideaId: ideaId,
              #content: content,
              #rating: rating,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateFeedback({
    required int? feedbackId,
    required String? content,
    required int? rating,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFeedback,
          [],
          {
            #feedbackId: feedbackId,
            #content: content,
            #rating: rating,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #updateFeedback,
            [],
            {
              #feedbackId: feedbackId,
              #content: content,
              #rating: rating,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteFeedback(int? feedbackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFeedback,
          [feedbackId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteFeedback,
            [feedbackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
